// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CriticalSection_RequestAccess_FullMethodName = "/Consensus.CriticalSection/RequestAccess"
	CriticalSection_ReleaseAccess_FullMethodName = "/Consensus.CriticalSection/ReleaseAccess"
)

// CriticalSectionClient is the client API for CriticalSection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// https://www.geeksforgeeks.org/lamports-algorithm-for-mutual-exclusion-in-distributed-system/
type CriticalSectionClient interface {
	RequestAccess(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
	ReleaseAccess(ctx context.Context, in *ReleaseMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
}

type criticalSectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalSectionClient(cc grpc.ClientConnInterface) CriticalSectionClient {
	return &criticalSectionClient{cc}
}

func (c *criticalSectionClient) RequestAccess(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, CriticalSection_RequestAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionClient) ReleaseAccess(ctx context.Context, in *ReleaseMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, CriticalSection_ReleaseAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalSectionServer is the server API for CriticalSection service.
// All implementations must embed UnimplementedCriticalSectionServer
// for forward compatibility.
//
// https://www.geeksforgeeks.org/lamports-algorithm-for-mutual-exclusion-in-distributed-system/
type CriticalSectionServer interface {
	RequestAccess(context.Context, *RequestMessage) (*ReplyMessage, error)
	ReleaseAccess(context.Context, *ReleaseMessage) (*ReplyMessage, error)
	mustEmbedUnimplementedCriticalSectionServer()
}

// UnimplementedCriticalSectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCriticalSectionServer struct{}

func (UnimplementedCriticalSectionServer) RequestAccess(context.Context, *RequestMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedCriticalSectionServer) ReleaseAccess(context.Context, *ReleaseMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAccess not implemented")
}
func (UnimplementedCriticalSectionServer) mustEmbedUnimplementedCriticalSectionServer() {}
func (UnimplementedCriticalSectionServer) testEmbeddedByValue()                         {}

// UnsafeCriticalSectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalSectionServer will
// result in compilation errors.
type UnsafeCriticalSectionServer interface {
	mustEmbedUnimplementedCriticalSectionServer()
}

func RegisterCriticalSectionServer(s grpc.ServiceRegistrar, srv CriticalSectionServer) {
	// If the following call pancis, it indicates UnimplementedCriticalSectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CriticalSection_ServiceDesc, srv)
}

func _CriticalSection_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalSection_RequestAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServer).RequestAccess(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSection_ReleaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServer).ReleaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalSection_ReleaseAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServer).ReleaseAccess(ctx, req.(*ReleaseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CriticalSection_ServiceDesc is the grpc.ServiceDesc for CriticalSection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalSection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Consensus.CriticalSection",
	HandlerType: (*CriticalSectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAccess",
			Handler:    _CriticalSection_RequestAccess_Handler,
		},
		{
			MethodName: "ReleaseAccess",
			Handler:    _CriticalSection_ReleaseAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
