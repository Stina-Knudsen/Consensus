// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TokenRingService_RequestToken_FullMethodName = "/proto.TokenRingService/RequestToken"
	TokenRingService_PassToken_FullMethodName    = "/proto.TokenRingService/PassToken"
)

// TokenRingServiceClient is the client API for TokenRingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the gRPC service
type TokenRingServiceClient interface {
	// RPC to request entering the Critical Section
	RequestToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// RPC to pass the token to the next node
	PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenRingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenRingServiceClient(cc grpc.ClientConnInterface) TokenRingServiceClient {
	return &tokenRingServiceClient{cc}
}

func (c *tokenRingServiceClient) RequestToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, TokenRingService_RequestToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenRingServiceClient) PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, TokenRingService_PassToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenRingServiceServer is the server API for TokenRingService service.
// All implementations must embed UnimplementedTokenRingServiceServer
// for forward compatibility.
//
// Define the gRPC service
type TokenRingServiceServer interface {
	// RPC to request entering the Critical Section
	RequestToken(context.Context, *TokenRequest) (*TokenResponse, error)
	// RPC to pass the token to the next node
	PassToken(context.Context, *Token) (*TokenResponse, error)
	mustEmbedUnimplementedTokenRingServiceServer()
}

// UnimplementedTokenRingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenRingServiceServer struct{}

func (UnimplementedTokenRingServiceServer) RequestToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}
func (UnimplementedTokenRingServiceServer) PassToken(context.Context, *Token) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassToken not implemented")
}
func (UnimplementedTokenRingServiceServer) mustEmbedUnimplementedTokenRingServiceServer() {}
func (UnimplementedTokenRingServiceServer) testEmbeddedByValue()                          {}

// UnsafeTokenRingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenRingServiceServer will
// result in compilation errors.
type UnsafeTokenRingServiceServer interface {
	mustEmbedUnimplementedTokenRingServiceServer()
}

func RegisterTokenRingServiceServer(s grpc.ServiceRegistrar, srv TokenRingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTokenRingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TokenRingService_ServiceDesc, srv)
}

func _TokenRingService_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenRingServiceServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenRingService_RequestToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenRingServiceServer).RequestToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenRingService_PassToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenRingServiceServer).PassToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenRingService_PassToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenRingServiceServer).PassToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenRingService_ServiceDesc is the grpc.ServiceDesc for TokenRingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenRingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TokenRingService",
	HandlerType: (*TokenRingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToken",
			Handler:    _TokenRingService_RequestToken_Handler,
		},
		{
			MethodName: "PassToken",
			Handler:    _TokenRingService_PassToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
